# -*- coding: utf-8 -*-
"""visual-methods_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g-E7D0VGEIHWrgFY4u6NpF99xZ5aTwfE
"""

# must include in the folder with this .py/.ipynb file data file .csv 'mlbootcamp5_train.csv', which could be found on github page of mlcourse.ai
import pandas as pd
import numpy as np

import warnings
warnings.filterwarnings("ignore")

import seaborn as sns
sns.set()

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.ticker

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

sns.set_context("notebook",
                font_scale = 1.5,
                rc = {
                    "figure.figsize": (11, 8),
                    "axes.titlesize": 18
                }
)

from matplotlib import rcParams
rcParams['figure.figsize'] = 11, 8

df = pd.read_csv('mlbootcamp5_train.csv', sep=';')
print('Dataset size: ', df.shape)
df.head()

df_uniques = pd.melt(frame = df, value_vars = ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio'])
df_uniques = pd.DataFrame(df_uniques.groupby(['variable', 'value'])['value'].count()) \
    .sort_index(level = [0, 1]) \
    .rename(columns = {'value' : 'count'}) \
    .reset_index()

sns.factorplot(x = 'variable', y = 'count', hue = 'value', data = df_uniques, kind = 'bar', size = 12);

df_uniques = pd.melt(frame = df, value_vars = ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active'], id_vars = ['cardio'])
df_uniques = pd.DataFrame(df_uniques.groupby(['variable', 'value', 'cardio'])['value'].count()) \
    .sort_index(level = [0, 1]) \
    .rename(columns = {'value' : 'count'}) \
    .reset_index()

sns.factorplot(x = 'variable', y = 'count', hue = 'value', col = 'cardio', data = df_uniques, kind = 'bar', size = 9);

for c in df.columns:
  n = df[c].nunique()
  print(c)
  if n <= 3:
    print(n, sorted(df[c].value_counts().to_dict().items()))
  else:
    print(n)
  print(10 * '-')

sns.factorplot(x='gender', y='height', 
               data=df, kind='bar', size=12);

sns.factorplot(x='gender', y='alco', 
               data=df, kind='bar', size=12);

sns.factorplot(x='gender', y='smoke', 
               data=df, size = 12, kind='bar');

sns.factorplot(x='smoke', y='age', 
               data=df, size = 12, kind='bar');

df[df['smoke'] == 1]['age'].median

df.groupby('gender')['smoke'].mean()
round(100 * (df.loc[df['gender'] == 2, 'smoke'].mean() - df.loc[df['gender'] == 1, 'smoke'].mean()))

df['age_years'] = (df['age'] / 365.25).round().astype('int')

df['age_years'].max()

smoking_old_men = df[(df['gender'] == 2) & (df['age_years'] >= 60)
                    & (df['age_years'] < 65) & (df['smoke'] == 1)]

smoking_old_men[(smoking_old_men['cholesterol'] == 3) &
               (smoking_old_men['ap_hi'] >= 160) &
               (smoking_old_men['ap_hi'] < 180)]['cardio'].mean()

df['BMI'] = df['weight'] / (df['height'] / 100) ** 2
df['BMI'].median()

df.groupby('gender')['BMI'].median()

df.groupby(['gender', 'alco', 'cardio'])['BMI'].median().to_frame()

filtered_df = df[(df['ap_lo'] <= df['ap_hi']) & 
                 (df['height'] >= df['height'].quantile(0.025)) &
                 (df['height'] <= df['height'].quantile(0.975)) &
                 (df['weight'] >= df['weight'].quantile(0.025)) & 
                 (df['weight'] <= df['weight'].quantile(0.975))]
print(filtered_df.shape[0] / df.shape[0])

df = filtered_df.copy()
corr = df.corr(method='pearson')

mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True

f, ax = plt.subplots(figsize=(12, 9))

sns.heatmap(corr, mask=mask, vmax=1, center=0, annot=True, fmt='.1f',
            square=True, linewidths=.5, cbar_kws={"shrink": .5});

df_melt = pd.melt(frame=df, value_vars=['height'], id_vars=['gender'])

plt.figure(figsize=(12, 10))
ax = sns.violinplot(
    x='variable', 
    y='value', 
    hue='gender', 
    palette="muted", 
    split=True, 
    data=df_melt, 
    scale='count',
    scale_hue=False
)

sns.FacetGrid(df, hue="gender", size=12) \
   .map(sns.kdeplot, "height").add_legend();

corr = df[['id', 'age', 'height', 'weight', 
           'ap_hi', 'ap_lo', 'cholesterol', 
           'gluc']].corr(method='spearman')

mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True

f, ax = plt.subplots(figsize=(12, 10))

sns.heatmap(corr, mask=mask, vmax=1, center=0, annot=True, fmt='.2f',
            square=True, linewidths=.5, cbar_kws={"shrink": .5});

sns.countplot(x="age_years", hue='cardio', data=df);