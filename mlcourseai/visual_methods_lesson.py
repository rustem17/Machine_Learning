# -*- coding: utf-8 -*-
"""visual-methods_lesson.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18hMlnuUARrLNeVaZA4CBUwFxrmIVoxz5
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import warnings
warnings.filterwarnings('ignore')

import matplotlib.pyplot as plt

import seaborn as sns
sns.set()

# %config InlineBackend.figure_format = 'retina'

df = pd.read_csv('telecom_churn.csv')
df.head()

features = ['Total day minutes', 'Total intl calls']
df[features].hist(figsize = (10, 4));

df[features].plot(kind = 'density', subplots = True, layout = (1, 2), sharex = False, figsize = (10, 4));

sns.distplot(df['Total intl calls']);

sns.boxplot(x = 'Total intl calls', data = df);

_, axes = plt.subplots(1, 2, sharey = True, figsize = (6, 4))
sns.boxplot(data = df['Total intl calls'], ax = axes[0]);
sns.violinplot(data = df['Total intl calls'], ax = axes[1]);

df[features].describe()

df['Churn'].value_counts()

_, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (12, 4))

sns.countplot(x = 'Churn', data = df, ax = axes[0]);
sns.countplot(x = 'Customer service calls', data = df, ax = axes[1]);

numerical = list(set(df.columns) - set(['State', 'International plan', 'Voice mail plan', 'Area code', 'Churn', 'Customer Service calls']))

corr_matrix = df[numerical].corr()
sns.heatmap(corr_matrix);

numerical = list(set(numerical) - set(['Total day charge', 'Total eve charge', 'Total night charge', 'Total intl charge']))

plt.scatter(df['Total day minutes'], df['Total night minutes']);

sns.jointplot(x = 'Total day minutes', y = 'Total night minutes', data = df, kind = 'scatter');

sns.jointplot('Total day minutes', 'Total night minutes', data = df, kind = 'kde', color = 'g');

sns.pairplot(df[numerical]);

sns.lmplot('Total day minutes', 'Total night minutes', data = df, hue = 'Churn', fit_reg = False);

numerical.append('Customer service calls')

fig, axes = plt.subplots(nrows = 3, ncols = 4, figsize = (10, 7))
for idx, feat in enumerate(numerical):
  ax = axes[int(idx / 4), idx % 4]
  sns.boxplot(x = 'Churn', y = feat, data = df, ax = ax)
  ax.set_xlabel('')
  ax.set_ylabel(feat)
fig.tight_layout();

_, axes = plt.subplots(1, 2, sharey = True, figsize = (10, 4))
sns.boxplot(x = 'Churn', y = 'Total day minutes', data = df, ax = axes[0]);
sns.violinplot(x = 'Churn', y = 'Total day minutes', data = df, ax = axes[1]);

sns.catplot(x = 'Churn', y = 'Total day minutes', col = 'Customer service calls', data = df[df['Customer service calls'] < 8], kind = "box", col_wrap = 4, height = 3, aspect = .8);

sns.countplot(x = 'Customer service calls', hue = 'Churn', data = df);

_, axes = plt.subplots(1, 2, sharey = True, figsize = (10, 4))

sns.countplot(x = 'International plan', hue = 'Churn', data = df, ax = axes[0]);
sns.countplot(x = 'Voice mail plan', hue = 'Churn', data = df, ax = axes[1]);

pd.crosstab(df['State'], df['Churn']).T

df.groupby(['State'])['Churn'].agg([np.mean]).sort_values(by = 'mean', ascending = False).T

from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler

X = df.drop(['Churn', 'State'], axis = 1)
X['International plan'] = X['International plan'].map({'Yes' : 1, 'No' : 0})
X['Voice mail plan'] = X['Voice mail plan'].map({'Yes' : 1, 'No' : 0})

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

tsne = TSNE(random_state = 17)
tsne_repr = tsne.fit_transform(X_scaled)

plt.scatter(tsne_repr[:, 0], tsne_repr[:, 1], alpha = .5);

plt.scatter(tsne_repr[:, 0], tsne_repr[:, 1], c = df['Churn'].map({False : 'blue', True : 'orange'}), alpha = .5);

_, axes = plt.subplots(1, 2, sharey = True, figsize = (12, 5))

for i, name in enumerate(['International plan', 'Voice mail plan']):
  axes[i].scatter(tsne_repr[:, 0], tsne_repr[:, 1], c = df[name].map({'Yes' : 'orange', 'No' : 'blue'}), alpha = .5);
  axes[i].set_title(name);